{"noir_version":"0.27.0+606ff4448571b0cfe4b92420c766c4239a4b23a0","hash":12979180598866098155,"abi":{"parameters":[],"param_witnesses":{},"return_type":null,"return_witnesses":[]},"bytecode":"H4sIAAAAAAAA/43NsQ2AMAwF0UQsZMd28t2xChbO/iMgBBIVUl5z5dXyqeXf/laoq+ZoycIHNQ8YqUUHgw12NogkFMPDBzmrJE9zmfS4H1tZdAHiFBIonQAAAA==","debug_symbols":"ZY3BCoQgFEX/5a5dOBLEe78yzOJNGQhikRaE+O8lFQQtD+fAyfBjJ8mNIYIzNPibEScJlWKSOYE/RK2CDT3Y6EYXhcF5C27aol4xGXO1RPRMfwesMjv5e1tf1S2hu9cHpm06TdkB","file_map":{"47":{"source":"use dep::std;\n\n// Verify whether a ball was pocketed legally\nfn verifyPocketBall(ball_number: Field, pocket_position: Field) {\n    // Assuming valid ball numbers are 1 to 15 (excluding cue ball)\n    if(ball_number as u32 >= 1 & ball_number as u32 <= 15 & pocket_position as u32 >= 1 & pocket_position as u32 <= 6){\n        true\n    }\n}\n\n// Verify the validity of a player's turn\nfn verifyTurnValidity(player_id: Field, shot_details: [Field; 2]) {\n    // Example: Check if the player ID is valid (1 or 2)\n    let force = shot_details[0];\n    let direc = shot_details[1];\n    if( force as u32 <= 500 & direc as u32 <=360  ){\n        true\n    }\n}\n\n// Verify the overall game state\nfn verifyGameState(table_state: Field, player_scores: [Field; 2])  {\n    // Example: Check if the table state is within valid range\n    let valid_table_state_range = 1000;\n    let player_score = player_scores[0]  + player_scores[1];\n    assert(valid_table_state_range as u32 < table_state as u32 & player_score as u32 > 0);\n}\n\n// Verify the final game outcome (win, loss, or draw)\nfn verifyGameOutcome(player_scores: [Field; 2], foul_count: Field)  {\n    // Example: Check if the winning player has the highest score\n    let winner_id = if player_scores[0] as u32 > player_scores[1] as u32 { 1 } else { 2 };\n\n    // Example: Validate foul count (non-negative)\n    let is_valid_foul_count = foul_count as u32  >= 0;\n\n    // Ensure that the winner's score is greater than the loser's score\n    assert(player_scores[winner_id - 1] as u32 > player_scores[2 - winner_id] as u32 & is_valid_foul_count);\n\n}\n\n// Example usage:\nfn main() {\n    // Simulate usage of the functions\n    let ball_number = 5;\n    let pocket_position = 3;\n    let is_valid_pocket = verifyPocketBall(ball_number, pocket_position);\n    \n\n    let player_id = 1;\n    let shot_details = [30, 45];\n    let is_valid_turn = verifyTurnValidity(player_id, shot_details);\n    \n\n    let table_state = 500;\n    let player_scores = [5, 3];\n    let is_valid_state = verifyGameState(table_state, player_scores);\n\n\n    let foul_count = 2;\n    let is_valid_outcome = verifyGameOutcome(player_scores, foul_count);\n\n}\n","path":"/mnt/c/Users/nagra/zk-pr/circuit/src/main.nr"}},"names":["main"]}